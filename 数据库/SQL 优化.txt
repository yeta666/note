1. 索引问题

	(1) 负向查询 不能命中索引
		SELECT name FROM user WHERE id NOT IN (1, 3, 4);
		应改为：
		SELECT name FROM user WHERE id IN (2, 5, 6);
		
	(2) 前导模糊查询 不能命中索引
		SELECT name FROM user WHERE name LIKE '%zhangsan';
		非前导可以：
		SELECT name FROM user WHERE name LIKE 'zhangsan%';
		可以考虑 lucene 全文检索
		
	(3) 数据区分不明显 不建议创建索引，如user表中的 性别 字段，
		可以明显区分的 才建议创建索引，如 身份证 等字段

	(4) 在字段上进行计算 不能命中索引
		SELECT name FROM user WHERE FROM_UNIXTIME(create_time) < CURDATE();
		应改为：
		SELECT name FROM user WHERE create_time < FROM_UNIXTIME(CURDATE());
		
	(5) 复合索引最左前缀问题
		假设已创建索引 CREATE INDEX comIndex1 ON b(age, email);
		可以命中索引：
			EXPLAIN SELECT * FROM b WHERE email='429721783@qq.com' AND age=12;
			EXPLAIN SELECT * FROM b WHERE age=12 AND email='429721783@qq.com';
			EXPLAIN SELECT * FROM b WHERE age=12;
		不能命中索引：
			EXPLAIN SELECT * FROM b WHERE email='429721783@qq.com';
		意思就是包含最左边的age的查询语句才可以命中索引
		
	(6) 如果需要进行 JOIN 的两表的字段类型要相同，否则不会命中索引
	
	(7) 对查询进行优化，要尽量避免全表扫描，首先应考虑在 WHERE 和 ORDER BY 涉及的列上建立索引
	
	(8) 给哪些字段建立索引？
	
	*********************************************************************************************************************
	*							*	主键			*	ID, PK															*
	*	需要建立索引			*	外键			*	PRODUCT_ID, COMPANY_ID, MEMBER_ID, ORDER_ID, TRADE_ID, PAY_ID	*
	*							*	身份标识字段	*	USERNAME, IDCARD_NO, EMALI, TEL_NO								*
	*********************************************************************************************************************
	*							*	日期			*	GMT_CREATE, GMT_MODIFIED										*
	*							*	年月			*	YEAR, MONTH														*
	*							*	状态标志		*	PRODUCT_STATUS, ORDER_STATUS, VIP_FLAG							*
	*	慎用，需要具体分析		*	类型			*	ORDER_TYPE, IMAGE_TYPE, GENDER, CURRENCY_TYPE					*
	*							*	区域			*	COUNTRY, PROVINCE, CITY											*
	*							*	操作人员		*	CREATOR, AUDITOR												*
	*							*	数值			*	LEVEL, AMOUNT, SCORE											*
	*							*	长字符			*	ADDRESS, COMPANY_NAME, SUMMARY, SUBJECT							*
	*********************************************************************************************************************	
	*							*	描述备注		*	DESCRIPTION, REMARK, DETAIL										*
	*	不需要建立索引			*   大字段			*	FILE_CONTENT, EMAIL_CONTENT										*
	*********************************************************************************************************************
	
	(9) 尽量避免在WHERE子句中使用 != 或 <> 操作符，否则会导致引擎放弃使用索引而进行全表扫描
		
	(10) 尽量避免在WHERE子句中使用 OR 来连接条件，如果一个条件有索引，一个条件没有索引，会导致不能命中索引
		可以修改为使用 UNION ALL 将两个查询的结果组合起来，这样有索引的查询可以命中索引
	
2. 其他问题

	(1) 不要让数据库做强制类型转换
		SELECT name FROM user WHERE telno=18722222222;
		应改为：
		SELECT name FROM user WHERE telno='18722222222';
	
	(2) 字段的默认值最好不为NULL
	
	(3) 如果明确知道只有一条记录返回使用 LIIMT 1 可以提高效率，让数据库停止游标移动
	
	(4) 如果需要插入大量数据，尽量使用多个值表的INSERT语句，可以大大减少客户端与数据库之间的连接、关闭等消耗
		INSERT INTO test VALUES(1, 2), (1, 3);
		
	(5) 尽量避免在WHERE子句中对字段进行NULL值判断，类似第(2)点
		SELECT id FROM t WHERE num IS NULL;
		应改为：
		设置num字段默认值为0，SELECT id FROM t WHERE num=0;
		
	(6) 
		
		
		
	
3. MySQL 优化
	
	(1) 查看当前日志输出的格式，可以是FILE（存储在数数据库的数据文件中的hostname.log），也可以是TABLE（存储在数据库中的mysql.general_log）
			SHOW VARIABLES LIKE '%log_output%';
	
	(2) 通用查询日志
	
		(a) 记录建立的客户端连接和执行的语句
		
		(b) 显示当前数据库中与版本号相关的东西
			SHOW VARIABLES LIKE '%version%';
			
		(c) 开启通用日志查询
			SET GLOBAL general_log=ON;
		
		(d) 关闭通用日志查询
			SET GLOBAL general_log=OFF;
			
		(e) 设置通用日志输出方式
			SET GLOBAL log_output='TABLE,FILE';
		
		(f) 上述设置命令仅对当前有效，MySQL 重启失效，永久生效配置my.cnf
			(g1) general_log=1						#为1表示开启通用日志查询，值为0表示关闭通用日志查询
			(g2) log_output=FILE,TABLE				#设置通用日志的输出格式为文件和表
		
		(g) 查询通用查询日志表
			SELECT * FROM mysql.general_log;
			
	(3) 慢查询日志
	
		(a) 记录所有执行时间超过long_query_time秒的所有查询或者不使用索引的查询
		
		(b) 查询慢查询日志状态
			SHOW VARIABLES LIKE '%quer%';
			参数解释：
				slow_query_log						值为ON表示开启慢查询日志，OFF表示关闭慢查询日志
				slow_query_log_file 				记录慢查询日志的文件
				long_query_time 					慢查询的阈值，即如果执行语句的时间超过该阈值则为慢查询语句，默认值为10秒
				log_queries_not_using_indexes 		设置为ON，则会记录所有没有利用索引的查询
				
		(c) 开启慢查询日志
			SET GLOBAL slow_query_log=ON;
			
		(d) 设置慢查询阀值
			SET GLOBAL long_query_time=1;
			
		(e) 查询慢查询日志表
			SELECT * FROM mysql.slow_log;
			
	(4) EXPLAIN 列说明
		
		(a) select_type			常见取值：simple（简单表） / primary（主查询） / union（union中的第二个或后面的查询语句） / subquery（子查询中的第一个SELECT语句）
		
		(b) table				结果集是关于那张表的
		
		(c) type				查找方式，常见取值：all / index / range / ref / eq_ref / const / system / null，从左到右性能由差变好
		
		(d) possible_keys		可能应用在这张表中的索引，如果为NULL表示没有可能的索引
		
		(e) key					实际使用的索引，如果为NULL表示没有使用索引
		
		(f) key_len				使用的索引的长度，在不损失精确性的情况下，长度越短越好
		
		(g) ref					显示索引的哪一列被使用了，如果可能的话，是一个常数
		
		(h) rows				查找的行数
		
		(i) Extra				额外信息
		
				
	
	
	
	
	
	
	
	
	
	
	
		