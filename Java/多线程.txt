1. 进程
	是程序（任务）的执行过程：动态性，只有运行起来之后才能叫进程
	持有资源（共享内存，共享文件）和线程，进程是资源和线程的载体
	
2. 线程
	是系统中最小的执行单元
	同一进程中有多个线程
	线程共享进程的资源
	
3. 线程的交互
	互斥、同步
	
4. 几个重要方法
	Thread.yield();		//当前执行的线程让出CPU，然后和所有线程一起重新竞争
	.join()		//在A线程中调用了B线程的join()方法时，表示只有当B线程执行完毕时，A线程才能继续执行
	Thread.sleep();		//线程睡眠
	
5. 线程的退出
	不推荐使用stop()方法，应该设置退出标志，通过判断这个变量来退出
	interrupt()方法不能用于线程退出

6. 互斥加锁
	private final Object lock = new Object();		//加锁对象

    public void 方法() {
        //对lock对象加锁实现线程互斥
        synchronized (lock) {
            while (某些条件) {
				lock.wait();		//因为不满足执行业务逻辑的条件，使线程进入等待状态，防止线程继续竞争CPU资源
			}
        }
		
		lock.notifyAll();		//唤醒所有lock对象上等待的线程
    }

7. 同步
	如	lock.wait()
		lock.notify()
		lock.notifyAll()

8. 争用条件
	当多个线程同时共享访问同一数据（内存区域）时，每个线程都尝试操作该数据，从而导致数据被破坏
	
9. Thread方式和Runnable方式的比较
	Thread方式单继承
	Runnable方法的“代码”可以被多个线程（Thread实例）共享，适合多个线程处理“同一资源”的情况
	MyRunnable myRunnable = new MyRunnable();
	Thread thread1 = new Thread(myRunnable);
	Thread thread2 = new Thread(myRunnable);
	
10. 守护线程
	运行在后台，为其他前台线程服务
	一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作
	应用：
		数据库连接池中的监测线程
		JVM虚拟机启动后的监测线程
		垃圾回收线程

11. 设置守护线程
	通过Thread类的setDaemon(true)方法设置当前线程为守护线程
	setDaemon(true)方法必须在start()方法之前调用，否则会抛出IllegalThreadStateException异常
	在守护线程中产生的新线程也是守护线程
	不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑，因为一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作
	
12. jstack生成线程快照

13. 可见性相关概念
	一个线程对“共享变量”值的修改，能够及时被其他线程看到
	共享变量：一个变量在多个“线程的工作内存”中都存在副本，必须定义为private
	线程的工作内存：“Java内存模型”描述的概念，保存该线程使用到的共享变量的副本（所有变量都存储在主内存中）
	Java内存模型（JMM）：描述了Java程序中线程共享变量的访问规则，以及在JVM中将共享变量存储到内存和从内存中读取共享变量这样的底层细节
	
14. 可见性的实现synchronized
	线程解锁前，必须把共享变量的最新值刷新到主内存中
	线程加锁时，将清空该线程工作空间中共享变量的值，从而使用共享变量时需要从主内存中读取
	线程解锁钱对共享变量的修改在下次加锁时对其他线程可见
	
15. 重排序
	代码书写的顺序与实际执行顺序可能不同
	指令重排序是编译器或处理器为了提高程序性能而做的优化
	种类：
		编译器优化的重排序（编译器优化）：在单线程中保证运行结果正确的情况下，对代码顺序的优化
		指令集并行重排序（处理器优化）：
		内存系统的重排序（处理器优化）：处理器对读写缓存做的优化
	as-if-serial：无论如何重排序，程序执行的结果应该一致（单线程）
	
16. 导致共享变量在线程间不可见的原因及解决方案
	线程的交叉执行		利用synchronized的原子性，一个线程对方法加锁后，其他线程只有等该线程解锁后才能执行
	重排序结合线程交叉执行		利用synchronized的原子性
	共享变量更新后的值没有在工作内存和主内存之间及时更新		利用synchronized的可见性，如14  
	
17. 可见性的实现volatile
	能够保证volatile变量的可见性（通过加入内存屏障和禁止重排序优化来实现）：
		对volatile变量执行写操作时，会在写操作后加入一条store屏障指令，强制写入主内存
		对volatile变量执行读操作时，会在读操作前加入一条load屏障指令，强制清除工作空间中的共享变量
	不能保证volatile变量复合操作的原子性，解决方案：
		synchronized关键字
		concurrent.locks包
			java.util.concurrent.locks.Lock lock = new java.util.concurrent.locks.ReentrantLock();
			lock.lock();
			try {
				//需要保证原子性的操作
			} finally {
				lock.unlock();
			}
			
18. volatile适用场合
	对变量的写入操作不依赖其当前值：boolean变量等
	该变量没有包含在具有其他变量的不变式中：两个volatile变量，a<b
	
19. final也可以保证内存可见性
	
		