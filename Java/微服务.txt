1. 什么是微服务架构？
	一系列小服务的组合
	单独运行
	构建需要结合业务功能
	独立部署
	去中心化的管理
2. 微服务粒度
	围绕业务功能
3. 独立进程
	微服务不依赖其他微服务
4. 围绕业务建模
5. 轻量级通信
	多个微服务之间的通信，与语言没有关系，与平台没有关系
	REST基于HTTP（经常用于网关与前端之间）
	HAL基于REST
	RPC(Thrift、gRpc、dubbo)（经常用于微服务层之间，数据量小、效率高、安全性高）
	消息队列 
6. 去中心化管理
	不限制语言
7. 柔性可用
	(1) 系统降级
		拒绝部分请求：
			(a) 拒绝老请求方式
				减轻微服务请求处理数量
				确保新请求正常响应
				RPC队列方式，检查请求在队列中超过一定时间，直接丢弃
			(b) 优先级请求方式
				非核心请求直接丢弃（与业务紧密相关，可以把请求优先级定义到配置中）
			(c) 随机拒绝方式
				随机丢弃一定比例请求，网站一会儿可用，一会儿不可用
		关闭部分服务（与业务紧密相关）
	(2) 数据层降级：
		更新请求：持久到消息队列，只更新缓存
		读请求：读缓存
		数据补齐：消息队列->数据库
8. 服务治理
	监控机器资源和进程状态
	(1) 进程监控：父进程监控子进程
	(2) 语义监控：对进程的接口进行监控，模拟用户请求，对比返回结果
	(3) 错误日志监控：某段时间的错误率飙升
	(4) 数据波动监控：流量的突增突减
	(5) 数据资源监控：CPU、内存
	(6) 对微服务的实时监控（请求平均耗时、请求异常条数）：Open-falcon框架

