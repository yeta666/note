1. 两台计算机通过IP地址、协议、端口号进行通信

2. TCP/IP模型：物理层、数据链路层、网络层、传输层、应用层
	(1) 传输层：TCP/IP
	(2) 应用层：HTTP（超文本传输协议，80端口）, FTP（文件传输协议，21端口）, SMTP（简单邮件传送协议）, Telnet（远程登陆服务，23端口）

3. Java中对网络支持的4大类
	(1) InetAddress：用于表示网络上的硬件资源，即IP地址；
		InetAddress address = InetAddress.getLocalHost();
		InetAddress address = InetAddress.getByName("localhost");
		address.getHostName()		获取主机名
		address.getHostAddress()	获取ip地址
	(2) URL：统一资源定位符，通过URL可以直接读取或写入网络上的数据；
		(a) 由两部分组成，协议名称:资源名称（http://www.imooc.com/learn/85）
		(b) 在java.net包中，提供了URL类来表示URL
			URL baidu = new URL("http://www.baidu.com");
			URL url = new URL(baidu, "/index.html?username=yeta");
			url.getProtocol()		获取协议
			url.getHost()			获取主机名
			url.getPort()			获取端口
			url.getPath()			获取文件路径
			url.getFile()			获取文件名
			url.getRef()			获取相对路径
			url.getQuery()			获取查询字符串
		(c) 通过URL对象的openStream()方法可以得到指定资源的输入流，通过输入流可以读取和访问网络上的资源
			URL baidu = new URL("http://www.baidu.com");
			InputStream is = baidu.openStream();
	(3) Sockets：使用TCP实现网络通信的Socket相关类；
	(4) Datagram：使用UDP，将数据保存在数据报中，通过网络进行通信。
	
4. 基于TCP的Socket通信
	(1) TCP是面向连接的、可靠的、有序的、以字节流的方式发送数据
	(2) 基于TCP实现网络通信的类
		(a) 客户端的Socket类
		(b) 服务端的ServerSocket类
	(3) Socket通信模型
		(a) 服务端：创建监听ServerSocket
		(b) 服务端：等待并接收连接请求
		(c) 客户端：创建连接Socket向服务端发送请求
		(d) 服务端：接收请求后创建连接Socket
		(e) 通过InputStream和OutputStream进行通信
		(f) 关闭Socket及相关资源

5. 基于UPD的Socket通信
	(1) UDP（用户数据报协议）是无连接的、不可靠的、无序的、相对来说比较快
	(2) UDP以数据报作为数据传输的载体，即进行数据传输时，首先将要传输的数据定义为数据报（Datagram），并指定数据所要达到的Socket（主机地址和端口号），然后再发送出去
	(3) 基于UDP实现网络通信的类
		(a) DatagramPacket		表示数据报包
		(b) DatagramSocket		进行端到端通信的类
		
6. Netty
	(1) 高性能事件驱动，异步非阻塞的Java开源框架，用于建立TCP等底层的链接
		基于Netty可以建立高性能的HTTP服务器，支持HTTP、WebSocket、TCP、UDP等
	(2) 基于NIO的客户端、服务端编程框架
	(3) 稳定性和伸缩性
	(4) 使用场景
		高性能领域、多线程并发领域、异步通信领域

7. IO通信
	(1) BIO通信：只有一个线程负责连接，为每个客户端创建一个线程，一请求一应答，缺乏弹性伸缩能力
	(2) 伪异步IO通信：线程池负责连接，M个请求N个应答，线程池阻塞
	(3) NIO通信：缓冲区Buffer，通道Channel，多路复用器Selector，
	(4) AIO通信：连接注册读写事件和回调函数，读写方法异步，主动通知程序
	
	对比
	(1) 客户端个数和IO线程数
		BIO：		1:1
		伪异步IO：	M:N
		NIO：		M:1
		AIO：		M:0
	(2) IO类型
		BIO：		同步阻塞IO
		伪异步IO：	同步阻塞IO
		NIO：		同步非阻塞IO
		AIO：		异步非阻塞IO
		
		
	

	